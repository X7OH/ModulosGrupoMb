<?xml version="1.0"?>
  <database name="FUNCTION SAEQ_ASIGNSEQUENCES">
    <function name="SAEQ_ASIGNSEQUENCES" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  V_assign_secuence_id VARCHAR2(32);
  v_c_invoice_id VARCHAR2(32);
  v_obpos_applications_id VARCHAR2(32);
  v_ecsds_compro_type_id  VARCHAR2(32);
  v_new_documentno NUMBER;
  v_contador NUMBER;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_saeq_sequencel RECORD;

  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      ) 
    LOOP

	V_assign_secuence_id:= Cur_Parameter.Record_ID;

    END LOOP; -- Get Parameter

	--Validar cajas cerradas.
	SELECT COALESCE(COUNT(OBERR.OBPOS_Errors_id),0)
		INTO v_contador
	FROM OBPOS_Errors OBERR
		INNER JOIN Obpos_Applications OBAPP on OBAPP.Obpos_Applications_ID = OBERR.Obpos_Applications_ID
	WHERE OBERR.orderstatus = 'N'
	AND TO_DATE(TO_CHAR(OBERR.created,'YYYY-MM-DD'),'YYYY-MM-DD') = TO_DATE(TO_CHAR(now(),'YYYY-MM-DD'),'YYYY-MM-DD');
		
 	  IF (v_contador >= 1) THEN
		RAISE_APPLICATION_ERROR(-20000, 'Existen cajas abiertas no se puede continuar con el proceso.');
	  END IF;

	--1. Desabilitar trg
		ALTER TABLE c_invoice
		DISABLE TRIGGER ALL;
		
    	-- leer las lineas de ventana asignar secuencias, determinar el/los ids de facturas repetidas.
    	FOR Cur_saeq_sequencel IN
		select a.c_invoice_id, a.obpos_applications_id, a.ecsds_compro_type_id, saeq_sequenceline_id
		from saeq_sequenceline a
		left join saeq_sequence b
		ON a.saeq_sequence_id = b.saeq_sequence_id
		where b.saeq_sequence_id =  V_assign_secuence_id 
		and char_length(a.documentno_actual) = 0 
		--or a.documentno_actual = ''

	LOOP
	v_c_invoice_id:=  Cur_saeq_sequencel.c_invoice_id;
	 v_obpos_applications_id:= Cur_saeq_sequencel.obpos_applications_id;
	 v_ecsds_compro_type_id:=  Cur_saeq_sequencel.ecsds_compro_type_id;
	 
		update c_invoice set em_eei_numauto=null, updated = now(),
		em_eei_codigo=null,em_eei_status=null,EM_EEI_URLRIDE=null,
		EM_EEI_URLXML=null,documentno=(select substring(STORE,1,3) || '-' || substring(STORE,4,6) 
		from ECSDS_PSALE_SEQ 
		where obpos_applications_id= v_obpos_applications_id
		and ecsds_compro_type_id= v_ecsds_compro_type_id ) || '-' || (select coalesce(min(seq),0) 
		from ECSDS_PSALE_SEQ_LINE 
		where ECSDS_PSALE_SEQ_id=(select ECSDS_PSALE_SEQ_id 
		from ECSDS_PSALE_SEQ 
		where obpos_applications_id= v_obpos_applications_id and ecsds_compro_type_id= v_ecsds_compro_type_id)
		 and is_used='N') where c_invoice_id=v_c_invoice_id; 
	 
		update ECSDS_PSALE_SEQ_LINE set is_used='Y' 
		where seq= (select coalesce(min(seq),0) 
		 from ECSDS_PSALE_SEQ_LINE 
		 where ECSDS_PSALE_SEQ_id=(select ECSDS_PSALE_SEQ_id 
		from ECSDS_PSALE_SEQ 
		where obpos_applications_id=v_obpos_applications_id
		and ecsds_compro_type_id=v_ecsds_compro_type_id) and is_used='N')
		 and ECSDS_PSALE_SEQ_id=(select ECSDS_PSALE_SEQ_id from ECSDS_PSALE_SEQ 
		where obpos_applications_id=v_obpos_applications_id and ecsds_compro_type_id=v_ecsds_compro_type_id);

	UPDATE  saeq_sequenceline
	SET documentno_actual = (SELECT  i.documentno 
	from c_invoice i	
	left join c_doctype dt on dt.c_doctype_id=i.c_doctype_id	
	left join c_bpartner bp on bp.c_bpartner_id=i.c_bpartner_id	
	where i.issotrx='Y' and  i.c_invoice_id = v_c_invoice_id
	) where c_invoice_id = v_c_invoice_id and saeq_sequence_id = V_assign_secuence_id;
	
	END LOOP;
	
	ALTER TABLE c_invoice
	ENABLE TRIGGER ALL;
	
	AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, '@Success@') ;
    RETURN;

    
  END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SAEQ_ASIGNSEQUENCES
]]></body>
    </function>
  </database>
