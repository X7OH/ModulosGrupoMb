<?xml version="1.0"?>
  <database name="FUNCTION SPINL_ACTIONBUTTON">
    <function name="SPINL_ACTIONBUTTON" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
*DESARROLLADO POR: 			RODNEY XAVIER JACOME TERAN
*FECHA DE LA ULTIMA MODIFICACION: 	20/10/2016 
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32):='0';
  v_ad_client VARCHAR2(32):='0';
  v_ad_org VARCHAR2(32):='0';
   
  v_product_id VARCHAR2(60);
  v_product VARCHAR2(60);
  v_m_locator_id VARCHAR2(60);
  v_m_productionplan_id VARCHAR2(60);
  v_maintenance_crew VARCHAR2(60);

  v_lcont NUMBER:=1;
  v_countsg NUMBER:=1;
  v_line NUMBER:=1;
  v_qtyinvoiced NUMBER:=1;
  v_line_pp NUMBER:=0;
  v_Aux NUMBER;
  v_bpartner VARCHAR2(32);
  v_bpartner_blocked VARCHAR2(1):='N';
  v_inOutBlocking VARCHAR2(1):='N';
  v_bpartner_name c_bpartner.name%TYPE;
  v_productname m_product.name%TYPE;

  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_RequisitionLine RECORD;
    Cur_lines RECORD;
    Cur_pro_plan RECORD;
    
BEGIN
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
  v_ResultStr:='PInstanceNotFound';
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, i.AD_Client_ID, i.AD_Org_ID,
        p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo) LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_ad_org:=Cur_Parameter.AD_Org_ID;
      v_ad_client:=Cur_Parameter.AD_Client_ID;
    END LOOP; -- Get Parameter

	--Almaceno el hueco de la cabecera
	SELECT em_spinl_m_locator_id
		INTO v_m_locator_id
	FROM m_production
	WHERE m_production_id = v_Record_ID;
	--Inserto en las lineas de plan de produccion
	
	
	FOR Cur_pro_plan IN
		(SELECT IVL.m_product_id as "m_product_id",SUM(IVL.qtyinvoiced) as "qtyinvoiced",PRO.name as "name"
			FROM c_invoiceline IVL
				INNER JOIN M_product PRO on PRO.m_product_id = IVL.m_product_id
			WHERE c_invoice_id = (SELECT MPRO.em_spinl_c_invoice_id 
						FROM m_production MPRO
						WHERE MPRO.m_production_id = v_Record_ID)
						AND PRO.IsBOM = 'Y'
			GROUP BY IVL.m_product_id,PRO.name)
	LOOP 
				INSERT INTO m_productionplan(m_productionplan_id,ad_client_id,ad_org_id,isactive,createdby,
					updatedby,m_production_id,line,m_product_id,productionqty,
					m_locator_id,description) 
				VALUES
					(GET_UUID(),v_ad_client,v_ad_org,'Y',v_User_ID,
					v_User_ID,v_Record_ID,(CASE WHEN 
									(SELECT count(line)  FROM m_productionplan where m_production_id = v_Record_ID) 
									<1 THEN 
									10
								WHEN (SELECT count(line)  FROM m_productionplan where m_production_id = v_Record_ID) is not null THEN 
									(SELECT line+10  FROM m_productionplan where m_production_id = v_Record_ID and created = (SELECT MAX(created)  FROM m_productionplan where m_production_id = v_Record_ID) limit 1) END)
										,Cur_pro_plan.m_product_id,Cur_pro_plan.qtyinvoiced,
					v_m_locator_id,Cur_pro_plan.name);
					

	END LOOP;

	FOR Cur_lines IN 
	    (SELECT MPR.m_productionplan_id,MPR.m_product_id,MPR.productionqty
	     FROM m_productionplan MPR
	     WHERE MPR.m_production_id = v_Record_ID)
		
	LOOP 
	
	v_countsg:=(select COUNT(*)  FROM M_Product_BOM PROB
			INNER JOIN m_product PROD ON PROD.m_product_id = PROB.m_productbom_id
			WHERE PROB.m_product_id = Cur_lines.m_product_id);
	
		IF (v_countsg>0)THEN
			INSERT INTO M_ProductionLine
				(M_ProductionLine_id,ad_client_id,ad_org_id,isactive,createdby,
				updatedby,m_productionplan_id,line,m_product_id,movementqty,
				m_locator_id,description,c_uom_id)
				
			(SELECT GET_UUID(),v_ad_client,v_ad_org,'Y',v_User_ID,
				v_User_ID,Cur_lines.m_productionplan_id,10,POD.m_product_id,Cur_lines.productionqty,
				v_m_locator_id,POD.name,POD.c_uom_id
			FROM m_product POD 
			WHERE m_product_id = Cur_lines.m_product_id);
				

			INSERT INTO M_ProductionLine
				(M_ProductionLine_id,ad_client_id,ad_org_id,isactive,createdby,
				updatedby,m_productionplan_id,line,m_product_id,movementqty,
				m_locator_id,description,c_uom_id)
			(SELECT GET_UUID(),v_ad_client,v_ad_org,'Y',v_User_ID,
				v_User_ID,Cur_lines.m_productionplan_id,(SELECT MAX(line)+10 
									FROM m_productionplan
									WHERE m_productionplan_id = Cur_lines.m_productionplan_id),
									PROB.m_productbom_id,((bomqty*Cur_lines.productionqty)*-1),
				v_m_locator_id,PROD.name,PROD.c_uom_id
			FROM M_Product_BOM PROB
				INNER JOIN m_product PROD ON PROD.m_product_id = PROB.m_productbom_id
			WHERE PROB.m_product_id = Cur_lines.m_product_id);
		END IF;    
	END LOOP;
	v_lcont :=(SELECT COUNT(*)
			FROM c_invoiceline IVL
				INNER JOIN M_product PRO on PRO.m_product_id = IVL.m_product_id
			WHERE c_invoice_id = (SELECT MPRO.em_spinl_c_invoice_id 
						FROM m_production MPRO
						WHERE MPRO.m_production_id = v_Record_ID)
						AND PRO.IsBOM = 'N');
	UPDATE m_production MP set iscreated='Y'
	WHERE MP.m_production_id = v_Record_ID;
	v_Message:= ' '|| v_lcont ||' Es el nÃºmero de productos que no han sido cargados por no contener lista de materiales.';

  END; --BODY
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('M_RequisitionLine_Post error: ' || v_ResultStr);
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
END SPINL_ACTIONBUTTON
]]></body>
    </function>
  </database>
