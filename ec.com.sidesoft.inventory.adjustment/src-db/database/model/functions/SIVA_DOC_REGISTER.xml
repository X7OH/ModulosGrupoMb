<?xml version="1.0"?>
  <database name="FUNCTION SIVA_DOC_REGISTER">
    <function name="SIVA_DOC_REGISTER" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
v_Record_ID VARCHAR2(32);
v_User_ID VARCHAR2(32):='0';
v_ResultStr VARCHAR2(2000):='';
v_Result NUMBER:=1; -- 0=failure
v_Message VARCHAR2(2000):='';
v_DocAction VARCHAR2(60);
v_DocStatus VARCHAR2(60);
v_client_id VARCHAR2(32);
v_org_id VARCHAR2(32);
v_m_locator_id VARCHAR2(32);
v_m_warehouse_id VARCHAR2(32);
v_flag VARCHAR2(32);
v_name_inv VARCHAR2(100);
v_description VARCHAR2(250);
v_documentno VARCHAR2(30);
v_movementdate DATE;
v_documenttype VARCHAR2(32);
v_my_alert VARCHAR2(32):='NDSAD';
v_m_attributesetinstance_id VARCHAR2(32);
v_NoInserted NUMBER:=0;
v_Contador_nuevo NUMBER:=0;
v_QtyOnHand NUMBER:=0;
v_Qtycount NUMBER:=0;
v_LinesCount NUMBER:=0;
v_Real_Qtycount NUMBER:=0;
v_id_newinventory VARCHAR2(32):='ND';
v_physical_invtlines_id VARCHAR2(32);
v_org_c_costcenter_id VARCHAR2(32);
v_Sql VARCHAR(2000);
v_stockline NUMBER:=0;
v_qtyandjust_f NUMBER:=0;
v_qtyonhand_f NUMBER:=0;
v_qtyandjust NUMBER:=0;
v_costs NUMBER:=0;

v_org_value VARCHAR2(30);
v_lote VARCHAR2(32);

--  Parameter
TYPE RECORD IS REF CURSOR;
Cur_Parameter RECORD;
Cur_Storage RECORD;
Cur_New_Storage RECORD;
Cur_Products_change RECORD;

BEGIN
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
  v_ResultStr:='PInstanceNotFound';
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, i.AD_Client_ID, i.AD_Org_ID,
        p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo) LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_client_id := Cur_Parameter.AD_Client_ID;
      v_org_id := Cur_Parameter.AD_Org_ID;
    END LOOP; -- Get Parameter

    -- Datos Cabecera	
    select AD_Org_ID, AD_client_id, M_Locator_ID, docstatus, documentno, name, description, c_doctype_id, 
		movementdate, m_warehouse_id, C_Costcenter_ID	
    into v_Org_ID, v_Client_ID, v_M_Locator_ID, v_DocStatus, v_documentno,v_name_inv, v_description, v_documenttype,
		v_movementdate, v_m_warehouse_id, v_org_c_costcenter_id	
    From siva_physical_inventory
    where siva_physical_inventory_id= v_Record_ID;
    

    select value 
    into v_org_value
    from ad_org  
    where ad_org_id  = v_Org_ID;

    v_documentno := v_org_value || '-' || v_documentno;

    select count(*) 
    into v_LinesCount
    from siva_physical_invtlines  
    where siva_physical_inventory_id  = v_Record_ID;

    If (v_LinesCount > 0) THEN
  	
	v_id_newinventory = get_uuid();		
	Insert into m_inventory(m_inventory_id, ad_client_id, ad_org_id, isactive, created, createdby, 
			       updated, updatedby, name, description, m_warehouse_id, movementdate, 
			       inventory_type, documentno, processing,
			       em_ssin_doctype_id, em_ssin_documentno,c_costcenter_id)
	Values (v_id_newinventory, v_client_id, v_org_id , 'Y', now(), v_User_ID, 
		now(), v_User_ID, v_name_inv, v_description, v_m_warehouse_id, v_movementdate, 
		'N', v_documentno, 'N',
		v_documenttype, v_documentno,v_org_c_costcenter_id);

	For Cur_Products_change In(
		select invt.qtyandjust, invt.m_product_id, invt.line, COALESCE(mpr.m_attributeset_id,'ND') as lote
		from siva_physical_invtlines invt
		JOIN (
			select m_product_id,m_attributeset_id from m_product 
			where 
			isactive = 'Y'  -- sube validacion
			and isstocked = 'Y' -- sube validacion
		) mpr ON mpr.m_product_id = invt.m_product_id --cambiado a JOIN
		where invt.siva_physical_inventory_id = v_Record_ID

		order by invt.qtyandjust desc		
	)
	Loop

		v_qtyandjust := Cur_Products_change.qtyandjust;
		v_lote := Cur_Products_change.lote;
		
		select coalesce(sum(a.qtyonhand),0) as qtyonhand
		into v_qtyonhand
		from m_storage_detail a
		--join m_product b on b.m_product_id = a.m_product_id  -- Relación no necesaria
		where a.m_product_id = Cur_Products_change.m_product_id --'0C2B609860874092BD3D3F0A9C922A31' 
		and a.m_locator_id = v_M_Locator_ID --'EC373C933DCE46409A48AC8FCCE402A5'
		--and b.isactive = 'Y' -- Validación no necesaria
		--and b.isstocked = 'Y' -- Validación no necesaria
		;

		v_Qtycount := v_qtyonhand + v_qtyandjust;

		select count(*) into v_costs from m_costing where m_product_id = Cur_Products_change.m_product_id;

		If (v_costs=0) Then
			RAISE_APPLICATION_ERROR(-20000, 'El producto de la linea No '||Cur_Products_change.line|| ', no tiene un costo anterior, solicite su ingreso.');
		End If;
		
		If(v_Qtycount >= 0)Then

			If(v_qtyonhand > 0)Then

				If(v_qtyandjust > 0)Then
					For Cur_New_Storage In(
						select a.qtyonhand, a.m_attributesetinstance_id, a.m_product_id, c.guaranteedate, a.created
						from m_storage_detail a
						--left join m_product b on b.m_product_id = a.m_product_id -- Relación no necesaria
						left join m_attributesetinstance c on c.m_attributesetinstance_id = a.m_attributesetinstance_id
						where a.m_product_id = Cur_Products_change.m_product_id  
						and a.m_locator_id = v_M_Locator_ID  
						--and b.isactive = 'Y' -- Validación no necesaria
						--and b.isstocked = 'Y' -- Validación no necesaria
						and a.qtyonhand > 0
						order by c.guaranteedate,a.created desc
						limit 1
					)
					Loop
						Insert Into m_inventoryline(m_inventoryline_id, ad_client_id, ad_org_id, isactive, created, 
								createdby, updated, updatedby, m_inventory_id, m_locator_id, 
								m_product_id, line, 
								qtybook, qtycount,
								 m_attributesetinstance_id, 
								c_uom_id)
						Values (get_uuid(), v_client_id, v_org_id, 'Y', now(), 
								v_User_ID, now(), v_User_ID, v_id_newinventory, v_M_Locator_ID, 
								Cur_New_Storage.M_Product_ID, COALESCE((select MAX(line) + 10 from m_inventoryline where m_inventory_id = v_id_newinventory),10), 
								Cur_New_Storage.qtyonhand, Cur_New_Storage.qtyonhand + Cur_Products_change.qtyandjust, 
								Cur_New_Storage.m_attributesetinstance_id, 
								(SELECT c_uom_id FROM m_product WHERE m_product_id = Cur_New_Storage.M_Product_ID));

					End Loop;
				Else
					v_qtyandjust := v_qtyandjust * -1;
					
					--Procesa Negativo
					For Cur_New_Storage In(
						select a.qtyonhand, a.m_attributesetinstance_id, a.m_product_id , c.guaranteedate, a.created
						from m_storage_detail a
						--left join m_product b on b.m_product_id = a.m_product_id  -- Relación no necesaria
						left join m_attributesetinstance c on c.m_attributesetinstance_id = a.m_attributesetinstance_id
						where a.m_product_id = Cur_Products_change.m_product_id  
						and a.m_locator_id = v_M_Locator_ID
						--and b.isactive = 'Y' -- Validación no necesaria
						--and b.isstocked = 'Y' -- Validación no necesaria
						and a.qtyonhand > 0
						order by c.guaranteedate, a.created asc
						)
					Loop

							If(v_qtyandjust >= Cur_New_Storage.qtyonhand)Then

								v_qtyandjust_f := Cur_New_Storage.qtyonhand;
								v_qtyonhand_f := Cur_New_Storage.qtyonhand;
								v_qtyandjust := v_qtyandjust - Cur_New_Storage.qtyonhand;

								Insert Into m_inventoryline(m_inventoryline_id, ad_client_id, ad_org_id, isactive, created, 
										createdby, updated, updatedby, m_inventory_id, m_locator_id, 
										m_product_id, line, 
										qtybook, qtycount,
										 m_attributesetinstance_id, 
										c_uom_id)
								Values (get_uuid(), v_client_id, v_org_id, 'Y', now(), 
										v_User_ID, now(), v_User_ID, v_id_newinventory, v_M_Locator_ID, 
										Cur_New_Storage.M_Product_ID, COALESCE((select MAX(line) + 10 from m_inventoryline where m_inventory_id = v_id_newinventory),10), 
										v_qtyonhand_f, v_qtyonhand_f - v_qtyandjust_f, 
										Cur_New_Storage.m_attributesetinstance_id, 
										(SELECT c_uom_id FROM m_product WHERE m_product_id = Cur_New_Storage.M_Product_ID));
							ElsIf(v_qtyandjust > 0)Then
								v_qtyandjust_f := v_qtyandjust;
								v_qtyonhand_f := Cur_New_Storage.qtyonhand;
								v_qtyandjust := 0;

								Insert Into m_inventoryline(m_inventoryline_id, ad_client_id, ad_org_id, isactive, created, 
										createdby, updated, updatedby, m_inventory_id, m_locator_id, 
										m_product_id, line, 
										qtybook, qtycount,
										 m_attributesetinstance_id, 
										c_uom_id)
								Values (get_uuid(), v_client_id, v_org_id, 'Y', now(), 
										v_User_ID, now(), v_User_ID, v_id_newinventory, v_M_Locator_ID, 
										Cur_New_Storage.M_Product_ID, COALESCE((select MAX(line) + 10 from m_inventoryline where m_inventory_id = v_id_newinventory),10), 
										v_qtyonhand_f, v_qtyonhand_f - v_qtyandjust_f, 
										Cur_New_Storage.m_attributesetinstance_id, 
										(SELECT c_uom_id FROM m_product WHERE m_product_id = Cur_New_Storage.M_Product_ID));
							End If;
							
					End Loop;	
				End If;
			
			Else
				
				IF(v_lote = 'ND')THEN

					/* EL PRODUCTO NO TIENE CONJUNTO DE ATRIBUTOS NO SE CREA UN LOTE */
					v_m_attributesetinstance_id := NULL;

				ELSE

					/* EL PRODUCTO TIENE CONJUNTO DE ATRIBUTOS SE CREA UN LOTE */
					SELECT 
						COALESCE((SELECT m_attributesetinstance_id
						FROM m_attributesetinstance 
						WHERE to_char(created,'YYYY-MM-DD') = to_char(now(),'YYYY-MM-DD')
						AND lot = 'L'),'ND')
					INTO v_m_attributesetinstance_id
					FROM DUAL;

					IF(v_m_attributesetinstance_id = 'ND')THEN

						SELECT get_uuid()
							INTO v_m_attributesetinstance_id
						FROM DUAL;
						
						INSERT INTO m_attributesetinstance(
							m_attributesetinstance_id, ad_client_id, ad_org_id, isactive, 
							created, createdby, updated, updatedby, m_attributeset_id, 
							lot, guaranteedate,  description)
						VALUES (v_m_attributesetinstance_id, v_client_id, v_org_id, 'Y', now(), 
								v_User_ID, now(), v_User_ID, '0', 
							'L', TO_DATE(to_char(now(),'YYYY-MM-DD'),'YYYY-MM-DD'), 'L_'||to_char(now(),'YYYY-MM-DD'));

					END IF;					

				END IF;				
			
				INSERT INTO m_inventoryline(
					m_inventoryline_id, ad_client_id, ad_org_id, isactive, created, 
					createdby, updated, updatedby, m_inventory_id, m_locator_id, 
					m_product_id, line, qtybook, qtycount,
					 m_attributesetinstance_id, 
					c_uom_id)
				VALUES (get_uuid(), v_client_id, v_org_id, 'Y', now(), 
					v_User_ID, now(), v_User_ID, v_id_newinventory, v_M_Locator_ID, 
					Cur_Products_change.M_Product_ID, COALESCE((select MAX(line)+10 from m_inventoryline where m_inventory_id = v_id_newinventory),10), 0, v_Qtycount, 
					v_m_attributesetinstance_id, 
					(SELECT c_uom_id FROM m_product WHERE m_product_id = Cur_Products_change.M_Product_ID)
					);
			End If;

		Else
	
			RAISE_APPLICATION_ERROR(-20000, 'En la linea No '||Cur_Products_change.line|| ' la cantidad deja el inventario con valor menor a 0.');

		End If;
		
	End Loop;

	UPDATE	siva_physical_inventory 
	SET docstatus = 'PR', documentno = v_documentno
	WHERE siva_physical_inventory_id= v_Record_ID;
	
	v_Message:='Se ingresó y completó un nuevo registro en en la ventana de Inventario Físico con el número de documento: '||v_documentno;

        v_Result:=1; --    success
    Else
	v_my_alert:='1';
	RAISE_APPLICATION_ERROR(-20000, 'No existen lineas para procesar esta transacción') ;
	
    End If;

  END; --BODY
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('M_RequisitionLine_Post error: ' || v_ResultStr);
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
END SIVA_DOC_REGISTER
]]></body>
    </function>
  </database>
