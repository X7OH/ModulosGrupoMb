<?xml version="1.0"?>
  <database name="FUNCTION SRDUPE_ATTRIBUTESETINSTANCE">
    <function name="SRDUPE_ATTRIBUTESETINSTANCE" type="NULL">
      <body><![CDATA[--  Logistice
	v_ResultStr VARCHAR2(2000):='';
	v_Message VARCHAR2(2000):='';
	v_Record_ID VARCHAR2(32);
	v_Result NUMBER:=1; --  Success
	--  Parameter
	TYPE RECORD IS REF CURSOR;
	Cur_InvLine RECORD;
	Cur_Trx RECORD;
	--  Record Info
	v_M_Transaction_ID VARCHAR2(32);
	v_Locator_ID VARCHAR2(32);
	v_Product_ID VARCHAR2(32);
	v_Attribute_ID VARCHAR2(32);
	v_qtyonhand NUMBER;
	v_qtyacum NUMBER:=0;

  BEGIN

    v_Result:=1;
    --  Get Parameters
    v_ResultStr:='ReadingParameters';

    -- INICIO LOOP M_STORAGE_DETAIL BUSQUEDA DE LOTE 0 Y CANTIDAD > 0
    FOR Cur_InvLine IN
         (  
         	select m.m_locator_id, m.m_product_id, m.m_attributesetinstance_id, qtyonhand
			from m_storage_detail m, m_product p
			where m.m_product_id = p.m_product_id 
			and qtyonhand > 0
			and m.m_attributesetinstance_id = '0'
			and p.m_attributeset_id is not null
			order by m_locator_id			
		)
    LOOP

		v_qtyacum:=0;

		SELECT p1.m_locator_id, p1.m_product_id, p1.m_attributesetinstance_id, p1.qtyonhand
		INTO v_Locator_ID, v_Product_ID, v_Attribute_ID, v_qtyonhand
		FROM m_storage_detail p1
		WHERE p1.m_locator_id=Cur_InvLine.m_locator_id
		AND p1.m_product_id=Cur_InvLine.m_product_id
		AND p1.m_attributesetinstance_id<>Cur_InvLine.m_attributesetinstance_id
		AND (p1.qtyonhand)>0;

    	-- INICIO LOOP M_TRASACTION
		FOR Cur_Trx IN
		 (select m_transaction_id, m_attributesetinstance_id, movementqty
		      from m_transaction 
		      where m_locator_id=v_Locator_ID 
		      and m_product_id=v_Product_ID 
		      and m_attributesetinstance_id=Cur_InvLine.m_attributesetinstance_id 
		      and (movementtype = 'P+' or movementtype = 'C-') 
		      and trxprocessdate > (now() - '1 days'::interval)::timestamp
		      order by TRXPROCESSDATE desc
		      limit 10)
		LOOP

			v_qtyacum:=v_qtyacum+Cur_Trx.movementqty;

			-- INICIO ACTUALIZACIONES A LA M_TRASACTION
			IF Cur_Trx.movementqty <= Cur_InvLine.qtyonhand then
				Update m_transaction set m_attributesetinstance_id = v_Attribute_ID where m_transaction_id = Cur_Trx.M_Transaction_ID;
				Exit;
			ELSE 
				IF ABS(v_qtyacum)<ABS(Cur_InvLine.qtyonhand) THEN
					Update m_transaction set m_attributesetinstance_id = v_Attribute_ID where m_transaction_id = Cur_Trx.M_Transaction_ID;
				ELSEIF ABS(v_qtyacum)=ABS(Cur_InvLine.qtyonhand) THEN
					Update m_transaction set m_attributesetinstance_id = v_Attribute_ID where m_transaction_id = Cur_Trx.M_Transaction_ID;
					EXIT;
				ELSE
					Update m_transaction set m_attributesetinstance_id = v_Attribute_ID where m_transaction_id = Cur_Trx.M_Transaction_ID;
					EXIT;
				END IF;
			END IF;
			-- FIN ACTUALIZACIONES A LA M_TRASACTION

		END LOOP;
		-- FIN LOOP M_TRASACTION

    END LOOP;
    -- FIN LOOP M_STORAGE_DETAIL BUSQUEDA DE LOTE 0 Y CANTIDAD > 0

    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
    RETURN;
EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    ROLLBACK;

    RETURN;
END SRDUPE_ATTRIBUTESETINSTANCE
]]></body>
    </function>
  </database>
