<?xml version="1.0"?>
  <database name="FUNCTION SPROV_CALCULATE_OVERTIME">
    <function name="SPROV_CALCULATE_OVERTIME" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2013 Openbravo SLU
* All Rights Reserved.
* Contributor(s): Ing Diego Armando Guallasamin Columba
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32):='0';
  v_DocAction VARCHAR2(60);
  v_DocStatus VARCHAR2(60);
  v_deparment_id VARCHAR2(32);
  v_datemovement DATE;
  v_client_id VARCHAR2(32);
  v_org_id VARCHAR2(32);
  v_sprov_overtime_id VARCHAR2(32);
  v_sspr_shift_id VARCHAR2(32);
  v_exit DATE;
  v_starttime DATE;
  v_endtime DATE;
  v_entry DATE;
  v_hour100 NUMBER;
  v_hour50 NUMBER;
  v_hour25 NUMBER;
  v_get_uuid VARCHAR2(32);
  v_delay1 NUMBER;
  v_delay2 NUMBER;
  v_delaytotal NUMBER;
  v_lessday NUMBER;

  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_overtime RECORD;
    Cur_shift RECORD;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
  v_ResultStr:='PInstanceNotFound';
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, i.AD_Client_ID, i.AD_Org_ID,
        p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo) LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User_ID:=Cur_Parameter.AD_User_ID;
      v_client_id := Cur_Parameter.AD_Client_ID;
      v_org_id := Cur_Parameter.AD_Org_ID;
    END LOOP; -- Get Parameter

  For Cur_overtime in(
	select  to_timestamp((to_char(a.datemovement,'YYYY-MM-DD') || ' ' || to_char(a.entry_1,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as entry_1, 
		to_timestamp((to_char(a.datemovement,'YYYY-MM-DD') || ' ' || to_char(a.exit_1,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as exit_1, 
		to_timestamp((to_char(a.datemovement,'YYYY-MM-DD') || ' ' || to_char(a.entry_2,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as entry_2, 
		to_timestamp((to_char(a.datemovement,'YYYY-MM-DD') || ' ' || to_char(a.exit_2,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as exit_2, 
		to_timestamp((to_char(a.datemovement,'YYYY-MM-DD') || ' ' || to_char(a.entry_dial_1,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as entry_dial_1, 
		to_timestamp((to_char(a.datemovement,'YYYY-MM-DD') || ' ' || to_char(a.chek_out_1,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as chek_out_1, 
		to_timestamp((to_char(a.datemovement,'YYYY-MM-DD') || ' ' || to_char(a.entry_dial_2,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as entry_dial_2, 
		to_timestamp((to_char(a.datemovement,'YYYY-MM-DD') || ' ' || to_char(a.chek_out_2,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as chek_out_2, 
		--a.entry_1,
		--a.exit_1,
		--a.entry_2,
		--a.exit_2,
		--a.entry_dial_1,
		--a.chek_out_1,
		--a.entry_dial_2,
		--a.chek_out_2,
		a.datemovement, 
		a.sspr_shift_id, 
		a.c_bpartner_id,
		a.sprov_employee_overtime_id, 
		a.insert_shift, 
		a.sspr_shift_id, 
		c.em_sspr_extra_hours,
		a.authorized_time
		--to_timestamp((to_char(a.datemovement,'YYYY-MM-DD') || ' ' || to_char(a.authorized_time,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as authorized_time
	from sprov_employee_overtime a
	left join c_bpartner c on c.c_bpartner_id = a.c_bpartner_id
	where a.sprov_employee_overtime_id = v_Record_ID
  )
  Loop
	v_get_uuid := Cur_overtime.sspr_shift_id;
	--Valida la diferencia de dias
	
	If(Cur_overtime.insert_shift = 'Y')Then
		--Inserta turno
		select sspr_shift_id
		into v_sspr_shift_id
		from sspr_contract
		where c_bpartner_id = Cur_overtime.c_bpartner_id
		and startdate = (select max(startdate)
				from sspr_contract
				where c_bpartner_id = Cur_overtime.c_bpartner_id);
		
		For Cur_shift in(
			select sspr_shift_id, ad_client_id, ad_org_id, isactive, created, createdby, updated, updatedby, starttime, endtime, 
				islunch, lunchtimemax, shifttype, name, em_sshr_hourend, entry, exit, em_sprbi_area_id, name_movement, value
			from sspr_shift
			where sspr_shift_id = v_sspr_shift_id
		)
		Loop
			v_get_uuid := get_uuid();	
			insert into sspr_shift(sspr_shift_id, ad_client_id, ad_org_id, isactive, created, createdby, updated, updatedby, 
					       starttime, endtime, islunch, lunchtimemax, shifttype, name, em_sshr_hourend, entry, exit, 
					       em_sprbi_area_id, name_movement, value)
			values(v_get_uuid, v_client_id, v_org_id, 'Y', now(), v_User_ID, now(), v_User_ID, 
				Cur_overtime.entry_1, Cur_overtime.exit_1, Cur_shift.islunch, Cur_shift.lunchtimemax, Cur_shift.shifttype, Cur_shift.name , Cur_shift.em_sshr_hourend, Cur_overtime.entry_2, Cur_overtime.exit_2, 
				Cur_shift.em_sprbi_area_id, Cur_shift.name_movement || to_char(Cur_overtime.datemovement,'yyyy-mm-dd'), Cur_shift.value || to_char(Cur_overtime.datemovement,'yyyy-mm-dd'));
		End Loop;

		update sprov_employee_overtime
		set sspr_shift_id = v_get_uuid
		where sprov_employee_overtime_id = Cur_overtime.sprov_employee_overtime_id;

	End If;
	
	v_hour100 := 0;
	v_hour50 := 0;
	v_hour25 := 0;

	If(Cur_overtime.em_sspr_extra_hours = 'N')Then
		v_hour100 := SPROV_OVERTIME_100(v_get_uuid, Cur_overtime.datemovement, Cur_overtime.authorized_time);
		v_hour50 := SPROV_OVERTIME_50(v_get_uuid, Cur_overtime.datemovement, Cur_overtime.authorized_time);
		v_hour25 := SPROV_OVERTIME_25(v_get_uuid, Cur_overtime.datemovement, Cur_overtime.authorized_time);

	Else
		v_hour100 := 0;
		v_hour50 := 0;
		v_hour25 := 0;
	End If;

	v_delay1 := 0;
	v_delay2 := 0;
	v_delaytotal := 0;
	
	If(Cur_overtime.entry_dial_1 is not null)Then
		v_delay1 := round(to_number(Cur_overtime.entry_dial_1 - Cur_overtime.entry_1) * 24,2);
		v_delaytotal := v_delaytotal + v_delay1;
	End If;

	If(Cur_overtime.entry_dial_2 is not null)Then
		v_delay2 := round(to_number(Cur_overtime.entry_dial_2 -  Cur_overtime.entry_2) * 24,2);
		v_delaytotal := v_delaytotal + v_delay2;
	End If;

	update sprov_employee_overtime
	set generated_time =  v_hour25 + v_hour50 + v_hour100,
	    time_25 = v_hour25,
	    time_50 = v_hour50,
	    time_100 = v_hour100,
	    calculate_hours = 'CO',
	    delay_1 = v_delay1,
	    delay_2 = v_delay2,
 	    total_arrears = v_delaytotal
	 where c_bpartner_id = Cur_overtime.c_bpartner_id
	 and datemovement = Cur_overtime.datemovement;
	 
  End Loop;   

  END; --BODY
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('Load biometric error: ' || v_ResultStr);
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
END SPROV_CALCULATE_OVERTIME
]]></body>
    </function>
  </database>
