<?xml version="1.0"?>
  <database name="FUNCTION SPROV_CALCULATE_HOUR">
    <function name="SPROV_CALCULATE_HOUR" type="NULL">
      <parameter name="p_startdate" type="TIMESTAMP" mode="in">
        <default/>
      </parameter>
      <parameter name="p_enddate" type="TIMESTAMP" mode="in">
        <default/>
      </parameter>
      <parameter name="p_c_bpartner_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_period_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_type_hour" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
Cur_overtime RECORD;

v_period_id VARCHAR2(32);
v_c_bpartner_id VARCHAR2(32);
v_client_id VARCHAR2(32);
v_org_id VARCHAR2(32);
v_user_id VARCHAR2(32);
v_startdate DATE;
v_enddate DATE;
v_ResultStr VARCHAR2(2000) := '';
v_n_insertions NUMBER;
v_Message VARCHAR2(2000):='';
v_concept_id VARCHAR2(32);
v_amount NUMBER;
v_type_hour VARCHAR2(32);
v_description VARCHAR2(100);
v_noconcept NUMBER;



  BEGIN --BODY
    -- Get Parameters
	v_ResultStr := 'ReadingParameters';
	v_n_insertions := 0;    

	--VARIABLES
	v_period_id := p_period_id;      
	v_client_id := p_client_id;
	v_org_id := p_org_id;
	v_user_id := p_user_id; 
	v_startdate := p_startdate;
	v_enddate := p_enddate;
	v_c_bpartner_id := p_c_bpartner_id;
	v_type_hour := p_type_hour;

    select coalesce((select sspr_concept_id
	    from sspr_concept
	    where concepttypepayroll = v_type_hour),'ND')
    into v_concept_id	 
    from dual;
    
    --HT 25 Horas 25
    --HF 50 Horas 50
    --HO 100 Horas 100
    
    If(v_concept_id != 'ND')Then
	    For Cur_overtime in (
			select c.name, sum(b.time_25) as total25, sum(b.time_50) as total50, sum(b.time_100) as total100, c.c_bpartner_id
			from sprov_employee_overtime b
			left join c_bpartner c on c.c_bpartner_id = b.c_bpartner_id
			where b.datemovement between v_startdate and v_enddate --'01-01-2018' and '31-05-2018' --v_startdate and v_enddate
			and b.processed = 'N'
			group by c.name, c.c_bpartner_id
			order by c.name, c.c_bpartner_id
	    )
	    Loop
		v_amount := 0;
		If(v_type_hour = 'HT')Then
			v_amount := Cur_overtime.total25;
			update sprov_employee_overtime
			set processed_hour_25 = 'Y'
			where datemovement between v_startdate and v_enddate
			and c_bpartner_id = Cur_overtime.c_bpartner_id;

			v_description:= 'HORAS 25';

		Elsif(v_type_hour = 'HF')Then
			v_amount := Cur_overtime.total50;
			update sprov_employee_overtime
			set processed_hour_50 = 'Y'
			where datemovement between v_startdate and v_enddate
			and c_bpartner_id = Cur_overtime.c_bpartner_id;
			
			v_description:= 'HORAS 50';

		Elsif(v_type_hour = 'HO')Then
			v_amount := Cur_overtime.total100;
			update sprov_employee_overtime
			set processed_hour_100 = 'Y'
			where datemovement between v_startdate and v_enddate
			and c_bpartner_id = Cur_overtime.c_bpartner_id;

			v_description:= 'HORAS 100';
			
		Else 
			v_amount := 0;
		End If;

		If(v_amount > 0)Then

			select count(*)
			into v_noconcept
			from sspr_concept_amount
			where sspr_concept_id = v_concept_id
			and c_bpartner_id = Cur_overtime.c_bpartner_id
			and c_period_id = v_period_id;
			
			if(v_noconcept > 0)Then

				RAISE_APPLICATION_ERROR(-20000, 'Ya existe un registro para el concepto ' || v_description || ' con el mismo periodo para el empleado ' || Cur_overtime.name);
			Else
				--Inserta novedades de las lineas del detalle de horas extras empleado
				INSERT INTO SSPR_Concept_Amount
				    (SSPR_Concept_Amount_ID, AD_Client_ID, AD_Org_ID, IsActive,
				    Created, CreatedBy, Updated, UpdatedBy,
				    SSPR_Concept_ID, C_BPartner_ID, C_Period_ID, Amount)
				VALUES
				    (get_uuid(), v_client_id, v_org_id, 'Y',
				    now(), v_user_id, now(), v_user_id,
				    v_concept_id, Cur_overtime.c_bpartner_id, v_period_id, v_amount);
			End If;
		End If;	  
	    End Loop;
    Else 
	RAISE_APPLICATION_ERROR(-20000, 'No existe concepto Horas ' || v_type_hour);
    
    End If;

    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
  				
RETURN;
END SPROV_CALCULATE_HOUR
]]></body>
    </function>
  </database>
