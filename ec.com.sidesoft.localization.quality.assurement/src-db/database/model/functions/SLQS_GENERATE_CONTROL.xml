<?xml version="1.0"?>
  <database name="FUNCTION SLQS_GENERATE_CONTROL">
    <function name="SLQS_GENERATE_CONTROL" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
Cur_Parameter RECORD;
Cur_DataControl RECORD;

v_template_employee VARCHAR2(32) ;
v_sspr_category_acct_id VARCHAR2(32) ;
v_EM_SSPR_Prolltemplate_ID VARCHAR2(32) ;
v_EM_SSPR_Status VARCHAR2(60);
v_ResultStr VARCHAR2(2000) := '';  
v_n_insertions NUMBER;	--OBTG:NUMBER--
v_Message VARCHAR2(2000):='';


v_MLocatorID VARCHAR2(32) ;
v_StatusQuality VARCHAR2(60);
v_QualityID  VARCHAR2(32) ;
v_CountReg  NUMBER;	--OBTG:NUMBER--
V_DoctypeQualityID VARCHAR2(32) ;
V_DoctypeCaseID VARCHAR2(32) ;
v_CreatedByID VARCHAR2(32) ;
v_ClientID VARCHAR2(32) ;
v_OrgID VARCHAR2(32) ;
v_InoutID VARCHAR2(32) ;


BEGIN
  --  Update AD_PInstance
  --RAISE NOTICE '%','Updating PInstance - Processing ' || PInstance_ID ;
  --v_ResultStr := 'PInstanceNotFound';
  --PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY

	-- Get Parameters
	v_ResultStr := 'ReadingParameters';
	v_n_insertions := 0;    

	FOR Cur_Parameter IN
	(SELECT i.Record_ID,p.ParameterName,p.P_String,p.P_Number,p.P_Date,p.AD_Client_ID,
	p.AD_Org_ID,p.CreatedBy       
	FROM AD_PInstance i
	LEFT JOIN AD_PInstance_Para p
	   ON i.AD_PInstance_ID = p.AD_PInstance_ID
	WHERE i.AD_PInstance_ID = PInstance_ID
	ORDER BY p.SeqNo
	)
	LOOP      	  
  
		v_QualityID:= Cur_Parameter.Record_ID;
		v_CreatedByID:= Cur_Parameter.CreatedBy;
		v_ClientID:=Cur_Parameter.AD_Client_ID;
		v_OrgID:=Cur_Parameter.AD_Org_ID;

	END LOOP; -- Get Parameter

    /*
    select
    coalesce((select count(*) from m_inoutline  where m_inout_id = v_QualityID),0)
    into v_CountReg
    from dual;

    if (v_CountReg) then
	raise exception '%',' Error Correcto';
    end if;*/

    V_DoctypeQualityID:='';
    v_n_insertions:=0;


    SELECT 
    COALESCE((SELECT C_DOCTYPE_ID FROM C_DOCTYPE WHERE AD_TABLE_ID = '800141' AND  docbasetype= 'SLQS_PC'),'ND')
    INTO V_DoctypeQualityID
    FROM DUAL;

    
    FOR Cur_DataControl IN(
	    SELECT MIL.AD_ORG_ID, MIL.ISACTIVE, TO_CHAR('Prueba de calidad recepciÃ³n: ') || MI.DOCUMENTNO || '-' ||
	    TO_CHAR(MI.MOVEMENTDATE,'dd/MM/yyyy') AS nombre, mil.m_product_id, MIL.C_UOM_ID
	    ,MIL.M_ATTRIBUTESETINSTANCE_ID as batch
	    ,MIL.EM_SLQS_MA_PER_CTRL_ID AS control
	    ,MIL.M_INOUT_ID
	    ,MIL.AD_ORG_ID
	    ,MIL.AD_CLIENT_ID
	    ,MIL.UPDATEDBY
	    ,MIL.M_INOUTLINE_ID
	    FROM M_INOUTLINE MIL 
	    JOIN M_INOUT MI ON MI.M_INOUT_ID = MIL.M_INOUT_ID
	    WHERE MIL.M_INOUT_ID = v_QualityID AND MIL.EM_SLQS_CHECK_QUALITY = 'Y'
	    AND EM_Slqs_Eval_Quality IS NULL
    )LOOP

    --V_DoctypeCaseID:= ad_sequence_doctype(V_DoctypeQualityID,null,'Y');
    
    
    INSERT INTO MA_PC_CASE(MA_PC_CASE_ID,		AD_CLIENT_ID,			AD_ORG_ID,			ISACTIVE,		CREATED, 	CREATEDBY,			UPDATED,	UPDATEDBY,
			   MA_PERIODIC_CONTROL_ID,	M_PRODUCT_ID,			M_ATTRIBUTESETINSTANCE_ID,	NAME,			STARTDATE,	ENDDATE,			LAUNCHED,	EM_SLQS_UOM_ID,
			   EM_SLQS_INOUT_ID,		EM_SLQS_DOCUMENT_TYPE,		EM_SLQS_DOCUMENTNO,		
			   EM_SLQS_STATUS,		EM_SLQS_PROCESSED)
		    VALUES(get_uuid(),			Cur_DataControl.AD_CLIENT_ID,	Cur_DataControl.AD_ORG_ID,	'Y',			now(),		Cur_DataControl.UPDATEDBY, 	now(),		Cur_DataControl.UPDATEDBY,
			   Cur_DataControl.control,	Cur_DataControl.M_PRODUCT_ID,	Cur_DataControl.batch,		Cur_DataControl.nombre,	now(),		now(),				'N',		Cur_DataControl.C_UOM_ID,
			   Cur_DataControl.M_INOUT_ID,	V_DoctypeQualityID,		ad_sequence_doctype(V_DoctypeQualityID,null,'Y'),
			   null,			'N');		
		    
    UPDATE M_INOUTLINE SET EM_Slqs_Eval_Quality='RE' WHERE M_INOUTLINE_ID = Cur_DataControl.M_INOUTLINE_ID;

    v_n_insertions:= v_n_insertions+1;
    v_InoutID:= Cur_DataControl.M_INOUT_ID;

    END LOOP;

    IF (v_n_insertions>0) THEN
	UPDATE M_INOUT SET EM_SLQS_GENERATE_CONTROL = 'Y' WHERE M_INOUT_ID = v_InoutID;
    END IF; 

	   
    v_Message := '@RowsInserted@: ' || v_n_insertions || '.';
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  
  END; --END BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SLQS_GENERATE_CONTROL
]]></body>
    </function>
  </database>
