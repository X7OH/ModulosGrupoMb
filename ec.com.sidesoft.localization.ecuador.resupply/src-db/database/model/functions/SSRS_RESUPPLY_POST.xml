<?xml version="1.0"?>
  <database name="FUNCTION SSRS_RESUPPLY_POST">
    <function name="SSRS_RESUPPLY_POST" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2013 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';     
  v_Message VARCHAR2(2000):='';       
  v_Result NUMBER:=1;                -- 0=failure
  v_Record_ID VARCHAR2(32);           
  v_User_ID VARCHAR2(32):='0';        
  v_DocAction VARCHAR2(60);           
  v_DocStatus VARCHAR2(60);           
  v_Aux NUMBER;
  v_bpartner VARCHAR2(32);            
  v_bpartner_blocked VARCHAR2(1):='N';
  v_inOutBlocking VARCHAR2(1):='N';   
  v_bpartner_name c_bpartner.name%TYPE;
  v_productname m_product.name%TYPE;
  v_Org_ID VARCHAR2(32);              
  v_em_ssrs_timeto DATE;
  v_created DATE;
  
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_ResupplyLine RECORD;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
  v_ResultStr:='PInstanceNotFound';
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    
	FOR Cur_Parameter IN
			(SELECT 
				i.Record_ID
				, i.AD_User_ID
				, i.AD_Client_ID
				, i.AD_Org_ID
		Entidad		,p.ParameterName
				, p.P_String
				, p.P_Number
				, p.P_Date
			FROM AD_PInstance i
			LEFT JOIN AD_PInstance_Para p
						ON i.AD_PInstance_ID=p.AD_PInstance_ID
			WHERE i.AD_PInstance_ID=p_PInstance_ID
			ORDER BY p.SeqNo) 
	LOOP
		v_Record_ID:=Cur_Parameter.Record_ID;
		v_User_ID:=Cur_Parameter.AD_User_ID;
	END LOOP; -- Get Parameter


		SELECT DocAction, DocStatus , c_bpartner_id,ad_org_id ,created 
			INTO v_DocAction, v_DocStatus, v_bpartner, v_Org_ID, v_created
		FROM SSRS_RESUPPLY
		WHERE Ssrs_Resupply_ID = v_Record_ID;
    
		IF (v_DocAction = 'CO' AND v_bpartner IS NOT NULL) THEN
		
			SELECT  vendor_blocking , po_order_blocking, name  
				INTO v_bpartner_blocked, v_inOutBlocking, v_bpartner_name
			FROM ssrs_resupply m, C_BPartner bp
			where m.c_bpartner_id = bp.c_bpartner_id
				and m.ssrs_resupply_id = v_Record_ID
				AND m.C_BPARTNER_ID    = v_bpartner;
				
			IF (v_bpartner_blocked = 'Y' AND v_inOutBlocking = 'Y')THEN
				RAISE_APPLICATION_ERROR(-20000,'@ThebusinessPartner@'||' '|| v_bpartner_name ||' '||'@BusinessPartnerBlocked@');
			END IF;
		
		ELSIF (v_DocAction = 'CO') THEN
		
			FOR Cur_ResupplyLine IN
					(SELECT 
						ssrs_resupplyline_id
						, c_bpartner_id
					FROM ssrs_resupplyline
					WHERE ssrs_resupply_id = v_Record_ID) 
			LOOP
				IF (Cur_ResupplyLine.c_bpartner_id IS NOT NULL) THEN
					SELECT  vendor_blocking , po_order_blocking, name  
						INTO v_bpartner_blocked, v_inOutBlocking, v_bpartner_name
					FROM ssrs_resupplyline m, C_BPartner bp
					WHERE m.c_bpartner_id=bp.c_bpartner_id
						AND m.ssrs_resupplyline_id = Cur_ResupplyLine.ssrs_resupplyline_id
						AND m.C_BPARTNER_ID = Cur_ResupplyLine.c_bpartner_id;
						
					IF (v_bpartner_blocked = 'Y' AND v_inOutBlocking = 'Y')THEN
						RAISE_APPLICATION_ERROR(-20000,'@ThebusinessPartner@'||' '|| v_bpartner_name ||' '||'@BusinessPartnerBlocked@');
					END IF;
					
				END IF;
			END LOOP; 
		END IF;

	v_ResultStr := 'Ssrs_Resupply ' || v_Record_ID || ', DocAction=' || v_DocAction || ', DocStatus=' || v_DocStatus || ', Org=' || v_Org_ID ;

	/**
	* Check if resupply has lines
	*/
	IF (v_DocAction = 'CO') THEN
		SELECT COUNT(*)
			INTO v_Aux
		FROM ssrs_resupplyline 
		WHERE ssrs_resupply_id = v_Record_ID;
		IF v_Aux=0 THEN
			RAISE_APPLICATION_ERROR(-20000, '@RequisitionWithoutLines@');
		END IF;
	END IF;

	SELECT count(*) 
		INTO v_aux
	FROM dual
	WHERE EXISTS (
			SELECT 1
			FROM ssrs_resupplyline rl 
				JOIN m_product p ON rl.m_product_id = p.m_product_id
			WHERE rl.ssrs_resupply_id = v_record_id
			AND p.isgeneric = 'Y');
			
	IF (v_aux > 0) THEN
	
		SELECT max(p.name) 
			INTO v_productname
		FROM ssrs_resupplyline  rl 
			JOIN m_product p ON rl.m_product_id = p.m_product_id
		WHERE rl.ssrs_resupply_id = v_record_id
			AND p.isgeneric = 'Y';
			
		RAISE_APPLICATION_ERROR(-20000, '@CannotUseGenericProduct@ ' || v_productName);
	END IF;

	SELECT em_ssrs_timeto 
		INTO v_em_ssrs_timeto
	FROM AD_ORG
	WHERE AD_ORG_ID = v_Org_ID;
    /**
    * Order Closed, Voided or Reversed - No action possible
    */
	IF(v_DocStatus IN('CL', 'VO', 'RE')) THEN
		RAISE_APPLICATION_ERROR(-20000, '@AlreadyPosted@') ;
	ELSIF (v_DocStatus = 'DR') THEN
		IF(v_created::time <= v_em_ssrs_timeto::time AND v_em_ssrs_timeto IS NOT NULL)THEN
			IF (v_DocAction = 'CO') THEN
				v_ResultStr := 'Complete the requisition: ' || v_Record_ID;
				UPDATE ssrs_resupply SET 
							DocStatus = 'CO',
							DocAction = 'CL',
							Updated=now(),
							UpdatedBy=v_User_ID
				WHERE ssrs_resupply_id = v_Record_ID;
			ELSE 
				RAISE_APPLICATION_ERROR(-20000, '@ActionNotAllowedHere@');
			END IF;
		ELSE
			RAISE_APPLICATION_ERROR(-20000, '@SSRS_ActionNoCompleteTime@');
		END IF;
	ELSIF (v_DocStatus = 'CO') THEN
		IF (v_DocAction = 'CL') THEN
			v_ResultStr := 'Close requisition lines';
			FOR Cur_ResupplyLine IN (
						SELECT ssrs_resupplyline_id
						FROM ssrs_resupplyline 
						WHERE ssrs_resupply_id  = v_Record_ID
							AND ReqStatus = 'O'
			)LOOP
			 SSRS_RESUPPLYLINE_STATUS(NULL, Cur_ResupplyLine.ssrs_resupplyline_ID, v_User_ID);
			END LOOP;
		ELSIF (v_DocAction = 'RE' ) THEN
			v_ResultStr := 'Reactivate the requisition: ' || v_Record_ID;
			UPDATE ssrs_resupply SET 
						DocStatus = 'DR',
						DocAction = 'CO',
						Updated=now(),
						UpdatedBy=v_User_ID
			WHERE ssrs_resupply_id = v_Record_ID;
		ELSE
			RAISE_APPLICATION_ERROR(-20000, '@ActionNotAllowedHere@');
		END IF;
	END IF;

	
  END; --BODY
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('M_RequisitionLine_Post error: ' || v_ResultStr);
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
END SSRS_RESUPPLY_POST
]]></body>
    </function>
  </database>
