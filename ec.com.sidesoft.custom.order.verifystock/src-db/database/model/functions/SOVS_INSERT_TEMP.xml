<?xml version="1.0"?>
  <database name="FUNCTION SOVS_INSERT_TEMP">
    <function name="SOVS_INSERT_TEMP" type="NUMERIC">
      <parameter name="p_product_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_warehouse_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_locator_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_qty" type="NUMERIC" mode="in">
        <default/>
      </parameter>
      <parameter name="p_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[v_myWarehouse_ID VARCHAR2(32);
    v_Quantity NUMBER:=99999; -- unlimited
    v_IsBOM CHAR(1);
    v_IsStocked CHAR(1);
    v_ProductType VARCHAR(60);
    v_ProductQty NUMBER;
    v_StdPrecision NUMBER;
    v_QtyBoomNeed NUMBER;

    v_UserId VARCHAR2(32);
    v_AdOrgId VARCHAR2(32);
    v_AdClientId VARCHAR2(32);
    -- Get BOM Product info
    TYPE RECORD IS REF CURSOR;
    CUR_BOM RECORD;
    Cur_Parameter RECORD;

    v_Line NUMBER:=10;
    v_StorageDetail VARCHAR2(32);
    v_WarehouseID VARCHAR2(32);
    v_Warehouse VARCHAR2(200);
    v_StorageDetailCount NUMBER;
    --
  BEGIN
    -- Check Parameters
    v_myWarehouse_ID:=p_Warehouse_ID;
    
    IF(v_myWarehouse_ID IS NULL) THEN
      IF(p_Locator_ID IS NULL) THEN
        RETURN 0;
      ELSE
        SELECT MAX(M_Warehouse_ID)
        INTO v_myWarehouse_ID
        FROM M_LOCATOR
        WHERE M_Locator_ID=p_Locator_ID;
      END IF;
    END IF;
    IF(v_myWarehouse_ID IS NULL) THEN
      RETURN 0;
    END IF;

    -- DBMS_OUTPUT.PUT_LINE('Warehouse=' || v_myWarehouse_ID);
    -- Check, if product exists and if it is stocked
  BEGIN

    SELECT IsBOM, ProductType, IsStocked
    INTO v_IsBOM, v_ProductType, v_IsStocked
    FROM M_PRODUCT
    WHERE M_Product_ID=p_Product_ID;

    --
  EXCEPTION -- not found
  WHEN OTHERS THEN
    RETURN 0;
  END;

  -- Unimited capacity if no item
  IF((v_ProductType<>'I' OR(v_IsStocked='N' AND(v_IsBOM='N')))) THEN
    RETURN v_Quantity;
    -- Stocked item
  ELSIF(v_IsStocked='Y') THEN

    -- Get ProductQty
    SELECT COALESCE(SUM(QtyOnHand), 0)
    INTO v_ProductQty
    FROM M_STORAGE_DETAIL s
    WHERE M_Product_ID=p_Product_ID  AND EXISTS
      (SELECT * FROM M_LOCATOR l  WHERE s.M_Locator_ID=l.M_Locator_ID  AND l.M_Warehouse_ID=v_myWarehouse_ID );
  END IF;
  
  -- GET:    
  FOR Cur_Parameter IN
    (SELECT ad_org_id, ad_client_id, createdby
    FROM c_order
    WHERE c_order_id = p_id
    )
  LOOP

      v_AdOrgId := Cur_Parameter.ad_org_id;
      v_AdClientId := Cur_Parameter.ad_client_id;
      v_UserId := Cur_Parameter.createdby;

  END LOOP; 

  -- Go though BOM
  -- DBMS_OUTPUT.PUT_LINE('BOM');
  FOR CUR_BOM IN
    (SELECT b.M_ProductBOM_ID, b.BOMQty, p.IsBOM, p.IsStocked, p.ProductType, p.name as prodname
    FROM M_PRODUCT_BOM b, M_PRODUCT p 
    WHERE b.M_ProductBOM_ID=p.M_Product_ID AND b.isactive='Y' 
    AND b.M_Product_ID=p_Product_ID
    )
  LOOP

    v_Line:=v_Line+10;
    v_QtyBoomNeed:= CUR_BOM.BOMQty;

    -- Stocked Items "leaf node"
    IF(CUR_BOM.ProductType='I' AND CUR_BOM.IsBOM='N' AND CUR_BOM.IsStocked = 'Y') THEN

      -- Get v_ProductQty
      SELECT COALESCE((SELECT COALESCE(SUM(QtyOnHand), 0)
      FROM M_STORAGE_DETAIL s
      WHERE M_Product_ID=CUR_BOM.M_ProductBOM_ID 
      and s.M_Locator_ID = p_locator_id),0)
      INTO v_ProductQty
      from dual;

      SELECT COALESCE((SELECT count(*)
      FROM M_STORAGE_DETAIL s
      WHERE M_Product_ID=CUR_BOM.M_ProductBOM_ID 
      and s.M_Locator_ID = p_locator_id),0)
      INTO v_StorageDetailCount
      from dual;

      if (v_StorageDetailCount=1) THEN

        SELECT COALESCE((SELECT M_STORAGE_DETAIL_ID
        FROM M_STORAGE_DETAIL s
        WHERE M_Product_ID=CUR_BOM.M_ProductBOM_ID 
        and s.M_Locator_ID = p_locator_id LIMIT 1),NULL)
        INTO v_StorageDetail
        from dual;
        
      ELSE

        SELECT COALESCE((SELECT M_STORAGE_DETAIL_ID
        FROM M_STORAGE_DETAIL s
        WHERE M_Product_ID=CUR_BOM.M_ProductBOM_ID 
        and s.M_Locator_ID = p_locator_id LIMIT 1),NULL)
        INTO v_StorageDetail
        from dual;

      END IF;


        SELECT COALESCE((SELECT MW.M_WAREHOUSE_ID
        FROM M_WAREHOUSE MW
        JOIN M_LOCATOR ML ON ML.M_WAREHOUSE_ID = MW.M_WAREHOUSE_ID
        WHERE  ML.M_Locator_ID = p_locator_id LIMIT 1 ),NULL)
        INTO v_WarehouseID
        from dual;

        INSERT INTO sovs_ldm_temp(sovs_ldm_temp_id,ad_client_id,ad_org_id,isactive,created,createdby,updated,updatedby,type,m_product_id, 
                                m_warehouse_id,qtyordered,stock,qty_necessary,differences,m_storage_detail_id,productorigin,m_locator_id, 
                                c_order_id) 
                          VALUES (get_uuid(),v_AdClientId,v_AdOrgId,'Y',now(),'100',now(),'100','MAT',CUR_BOM.M_ProductBOM_ID, 
                                  v_WarehouseID,p_qty,v_ProductQty,COALESCE((v_QtyBoomNeed *  p_qty), 0),COALESCE((v_ProductQty - (v_QtyBoomNeed *  p_qty)), 0), 
                                  v_StorageDetail,(SELECT 'LDM: ' || NAME FROM M_PRODUCT WHERE M_PRODUCT_ID = p_Product_ID),p_locator_id, p_id);

        -- Get Rounding Precision
        SELECT COALESCE(MAX(u.StdPrecision), 0)
        INTO v_StdPrecision
        FROM C_UOM u, M_PRODUCT p
        WHERE u.C_UOM_ID=p.C_UOM_ID AND p.M_Product_ID=CUR_BOM.M_ProductBOM_ID;
        
        -- How much can we make with this product
        IF COALESCE(CUR_BOM.BOMQty, 0)=0 THEN
          v_ProductQty:=0;
        ELSE
          v_ProductQty:=ROUND(v_ProductQty/CUR_BOM.BOMQty, v_StdPrecision ) ;
        END IF;
        -- How much can we make overall
        IF(v_ProductQty<v_Quantity) THEN
          v_Quantity:=v_ProductQty;
        END IF;
        -- Another BOM
    
    ELSIF(CUR_BOM.IsBOM='Y') THEN

      SELECT COALESCE((SELECT M_STORAGE_DETAIL_ID
      FROM M_STORAGE_DETAIL s
      WHERE M_Product_ID=CUR_BOM.M_ProductBOM_ID 
      and s.M_Locator_ID = p_locator_id LIMIT 1),NULL)
      INTO v_StorageDetail
      from dual;

      SELECT COALESCE((SELECT ML.M_WAREHOUSE_ID
      FROM M_WAREHOUSE MW
      JOIN M_LOCATOR ML ON ML.M_WAREHOUSE_ID = MW.M_WAREHOUSE_ID
      WHERE  ML.M_Locator_ID = p_locator_id LIMIT 1),NULL)
      INTO v_WarehouseID
      from dual;

      INSERT INTO sovs_ldm_temp(sovs_ldm_temp_id,ad_client_id,ad_org_id,isactive,created,createdby,updated,updatedby, 
                                type,m_product_id,m_warehouse_id,qtyordered,stock,qty_necessary,differences, m_storage_detail_id, 
                                productorigin,m_locator_id,c_order_id) 
                        VALUES (get_uuid(),v_AdClientId,v_AdOrgId,'Y',now(),'100',now(),'100','LDM', 
                                CUR_BOM.M_ProductBOM_ID,v_WarehouseID,p_qty,0,0,0,v_StorageDetail, 
                                (SELECT 'LDM: ' || NAME FROM M_PRODUCT WHERE M_PRODUCT_ID = p_Product_ID), 
                                p_locator_id,p_id);     
      
      v_ProductQty:=sovs_insert_temp(CUR_BOM.M_ProductBOM_ID, v_myWarehouse_ID,p_locator_id, (v_QtyBoomNeed *  p_qty) ,p_id) ;
      -- How much can we make overall
      IF(v_ProductQty<v_Quantity) THEN
        v_Quantity:=v_ProductQty;
      END IF;
      
    END IF;
    
  END LOOP; -- BOM

  RETURN 0;
END SOVS_INSERT_TEMP
]]></body>
    </function>
  </database>
