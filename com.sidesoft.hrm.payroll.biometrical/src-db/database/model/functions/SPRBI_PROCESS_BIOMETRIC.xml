<?xml version="1.0"?>
  <database name="FUNCTION SPRBI_PROCESS_BIOMETRIC">
    <function name="SPRBI_PROCESS_BIOMETRIC" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
Cur_Parameter RECORD;  
Cur_biometric RECORD;
  v_status VARCHAR(32);   -- ALMACENA EL ESTADO ATADO A LA RAZON DE LA OT
  v_ResultStr VARCHAR2(2000):='';
  v_StatusDocumento_P VARCHAR(60);--OBTG:VARCHAR2--
  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32) ;
  v_Record_ID  VARCHAR2(32);
  v_Message VARCHAR2(2000):='';  
  v_movementdate DATE;
  v_sspr_shift_id VARCHAR2(32);
  v_starttime DATE; 
  v_endtime DATE; 
  v_entry DATE; 
  v_exit DATE;
  v_flat NUMBER;
  v_delay1 NUMBER;
  v_delay2 NUMBER;
  v_delaytotal NUMBER;
  
BEGIN
  --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
  v_ResultStr := 'PInstanceNotFound';
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  
  BEGIN --BODY

   FOR Cur_Parameter IN
      (SELECT i.Record_ID,
      p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        p.AD_Client_ID,
        p.AD_Org_ID,
        p.CreatedBy   
      FROM AD_PInstance i 
      LEFT JOIN AD_PInstance_Para p
           ON i.AD_PInstance_ID = p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID = PInstance_ID
      ORDER BY p.SeqNo       
      )
    LOOP

	    IF (Cur_Parameter.ParameterName = 'movementdate') THEN
		v_movementdate := Cur_Parameter.P_Date;      
		v_Record_ID := Cur_Parameter.Record_ID;	
		v_Client_ID := Cur_Parameter.AD_Client_ID;
		v_Org_ID := Cur_Parameter.AD_Org_ID;
		v_User_ID := Cur_Parameter.CreatedBy;
            ELSE  
		DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
	    END IF;       
    END LOOP; -- End Get Parameter
    
  v_flat := 0;
  For Cur_biometric in (
	   select a.sprbi_biometric_id, a.datemovement, a.entryhour_m, a.exithour_m, a.entryhour_a, a.exithour_a, a.c_bpartner_id, a.identify,
	   coalesce(b.em_sprbi_area_id,'ND') as area, b.name as employee, coalesce(b.em_sshr_department_id,'ND') as department
	   from sprbi_biometric a
	   left join c_bpartner b on b.c_bpartner_id = a.c_bpartner_id
	   where a.datemovement = v_movementdate
	   and a.state = 'DR'
  )
  Loop
	v_delay1 := 0;
	v_delay2 := 0;
	v_delaytotal := 0;
	If(Cur_biometric.department = 'ND')Then
		RAISE_APPLICATION_ERROR(-20000, 'Empleado: ' ||  Cur_biometric.employee || ' no tiene configurado el campo Departamento');
	End If;
		
	If(Cur_biometric.area = 'ND') Then
		RAISE_APPLICATION_ERROR(-20000, 'Empleado: ' ||  Cur_biometric.employee || ' no tiene configurado el campo area');
	Else
		select sspr_shift_id
		into v_sspr_shift_id
		from sspr_contract
		where c_bpartner_id = Cur_biometric.c_bpartner_id
		and startdate = (select max(startdate)
				from sspr_contract
				where c_bpartner_id = Cur_biometric.c_bpartner_id);

		If(v_sspr_shift_id is null or v_sspr_shift_id = '')Then
			RAISE_APPLICATION_ERROR(-20000, 'Empleado: ' ||  Cur_biometric.employee || ' no tiene configurado el campo turno');
		Else
			select to_timestamp((to_char(Cur_biometric.datemovement,'YYYY-MM-DD') || ' ' || to_char(starttime,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as starttime, 
			to_timestamp((to_char(Cur_biometric.datemovement,'YYYY-MM-DD') || ' ' || to_char(endtime,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as endtime, 
			to_timestamp((to_char(Cur_biometric.datemovement,'YYYY-MM-DD') || ' ' || to_char(entry,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as entry,
			to_timestamp((to_char(Cur_biometric.datemovement,'YYYY-MM-DD') || ' ' || to_char(exit,'HH24:MI:SS')),'yyyy-mm-dd HH24:MI:SS') as exit
			into v_starttime, v_endtime, v_entry, v_exit
			from sspr_shift
			where sspr_shift_id = v_sspr_shift_id;
		
		End If;

		--Calculo Atrasos
		If(Cur_biometric.entryhour_m is not null)Then
			v_delay1 := round(to_number(Cur_biometric.entryhour_m - v_starttime) * 24,2);
			v_delaytotal := v_delaytotal + v_delay1;
		End If;

		If(Cur_biometric.entryhour_a is not null)Then
			v_delay2 := round(to_number(Cur_biometric.entryhour_a -  v_entry) * 24,2);
			v_delaytotal := v_delaytotal + v_delay2;
		End If;

		insert into sprov_employee_overtime( sprov_employee_overtime_id, ad_client_id, ad_org_id, isactive, created, createdby, updated, updatedby,
						identify, c_bpartner_id, datemovement, entry_1, exit_1, entry_2, exit_2,
						sprbi_area_id, sshr_department_id, entry_dial_1, chek_out_1, entry_dial_2, chek_out_2, sspr_shift_id,
						delay_1, delay_2, total_arrears)
		values(get_uuid(), v_Client_ID,v_Org_ID, 'Y',now(),v_User_ID, now(),v_User_ID,
			Cur_biometric.identify, Cur_biometric.c_bpartner_id, Cur_biometric.datemovement,v_starttime, v_endtime, v_entry, v_exit,
			Cur_biometric.area,Cur_biometric.department, Cur_biometric.entryhour_m, Cur_biometric.exithour_m, Cur_biometric.entryhour_a, Cur_biometric.exithour_a, v_sspr_shift_id,
			v_delay1, v_delay2, v_delaytotal);
		
		update sprbi_biometric
		set state = 'CO'
		where sprbi_biometric_id = Cur_biometric.sprbi_biometric_id;

		v_flat := v_flat + 1; 
	End If;
		
  End Loop;

  If(v_flat <= 0)Then
	RAISE_APPLICATION_ERROR(-20000, 'No existen movimientos para la fecha seleccionado: ' || v_movementdate);
  End If;	    
	
   
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
    
  END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SPRBI_PROCESS_BIOMETRIC
]]></body>
    </function>
  </database>
